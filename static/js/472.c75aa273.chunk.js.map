{"version":3,"file":"static/js/472.c75aa273.chunk.js","mappings":"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","sources":["module/post/PostAddNew.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport styled from \"styled-components\";\nimport { Button } from \"../../components/button\";\nimport { Radio } from \"../../components/checkbox\";\nimport { Dropdown } from \"../../components/dropdown\";\nimport { Field } from \"../../components/field\";\nimport { Input } from \"../../components/input\";\nimport { Label } from \"../../components/label\";\nimport slugify from \"slugify\";\nimport { postStatus, userRole } from \"../../utils/constants\";\nimport {\n  addDoc,\n  collection,\n  doc,\n  getDoc,\n  getDocs,\n  query,\n  serverTimestamp,\n  where,\n} from \"firebase/firestore\";\nimport UploadImage from \"../../components/uploadImage\";\nimport Toggle from \"../../components/toggle/Toggle\";\nimport { useEffect } from \"react\";\nimport { database } from \"../../firebase/firebase-config\";\nimport { useAuth } from \"../../context/auth-context\";\nimport { toast } from \"react-toastify\";\nimport useFirebaseImage from \"../../hooks/useFirebaseImage\";\nimport { useNavigate } from \"react-router-dom\";\nimport Textarea from \"../../components/textarea/Textarea\";\n\nconst PostAddNewStyles = styled.div``;\nconst PostAddNew = () => {\n  const navigate = useNavigate();\n  const { control, watch, handleSubmit, setValue, getValues, reset } = useForm({\n    mode: \"onChange\",\n    defaultValues: {\n      title: \"\",\n      slug: \"\",\n      status: 2,\n      category: {},\n      hot: false,\n      image: \"\",\n      user: {},\n    },\n  });\n  const {\n    progress,\n    image,\n    handleSelectImage,\n    handleDeleteImage,\n    handleResetUpload,\n  } = useFirebaseImage(setValue, getValues);\n  const [categories, setCategories] = useState([]);\n  const [selectCategory, setSelectCategory] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const { userInfo } = useAuth();\n  useEffect(() => {\n    async function getData() {\n      const colRef = collection(database, \"categories\");\n      const q = query(colRef, where(\"status\", \"==\", 1));\n      const querySnapshot = await getDocs(q);\n      let result = [];\n      querySnapshot.forEach((doc) => {\n        result.push({\n          id: doc.id,\n          ...doc.data(),\n        });\n      });\n\n      setCategories(result);\n    }\n    getData();\n  }, []);\n  const watchStatus = watch(\"status\");\n  const watchHot = watch(\"hot\");\n  useEffect(() => {\n    async function fetchDataUser() {\n      if (!userInfo.email) return null;\n      const q = query(\n        collection(database, \"users\"),\n        where(\"email\", \"==\", userInfo.email)\n      );\n      const querySnapshot = await getDocs(q);\n      querySnapshot.forEach((doc) => {\n        setValue(\"user\", {\n          id: doc.id,\n          ...doc.data(),\n        });\n      });\n    }\n    fetchDataUser();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [userInfo.email]);\n  const addPostHandle = async (values) => {\n    try {\n      setLoading(true);\n      const cloneValues = { ...values };\n      cloneValues.slug = slugify(values.slug || values.title, { lower: true });\n      cloneValues.status = Number(values.status);\n\n      const colRef = collection(database, \"posts\");\n      await addDoc(colRef, {\n        ...cloneValues,\n        userId: cloneValues.user.id,\n        categoryId: cloneValues.category.id,\n        image,\n        createdAt: serverTimestamp(),\n      });\n      toast.success(\"Create new post successfully!!!\");\n      reset({\n        title: \"\",\n        slug: \"\",\n        status: 2,\n        category: {},\n        hot: false,\n        image: \"\",\n        user: {},\n      });\n      handleResetUpload();\n      setSelectCategory({});\n      navigate(\"/manage/post\");\n    } catch (error) {\n      setLoading(false);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const handleSelectCategory = async (item) => {\n    const colRef = doc(database, \"categories\", item.id);\n    const docData = await getDoc(colRef);\n\n    setValue(\"category\", {\n      id: docData.id,\n      ...docData.data(),\n    });\n\n    setSelectCategory(item);\n  };\n  useEffect(() => {\n    document.title = \"Developer way - Add new post \";\n  }, []);\n  return (\n    <PostAddNewStyles>\n      <h1 className=\"dashboard-heading\">Add new post</h1>\n      <form onSubmit={handleSubmit(addPostHandle)}>\n        <div className=\"grid mb-5 sm:grid-cols-1 lg:grid-cols-1 lg:gap-x-10 lg:mb-10\">\n          <Field>\n            <Label>Image</Label>\n            <UploadImage\n              onChange={handleSelectImage}\n              className=\" h-[400px]\"\n              progress={progress}\n              image={image}\n              handleDeleteImage={handleDeleteImage}\n            ></UploadImage>\n          </Field>\n        </div>\n        <div className=\"form-layout\">\n          <Field>\n            <Label>Title</Label>\n            <Input\n              name=\"title\"\n              control={control}\n              placeholder=\"Enter your title\"\n            ></Input>\n          </Field>\n          <Field>\n            <Label>Category</Label>\n            <Dropdown>\n              <Dropdown.Select\n                placeholder={`${selectCategory?.name || \"Select at Categoris\"}`}\n              ></Dropdown.Select>\n              <Dropdown.List>\n                {categories.length > 0 &&\n                  categories.map((item) => (\n                    <Dropdown.Option\n                      key={item.id}\n                      onClick={() => handleSelectCategory(item)}\n                    >\n                      {item.name}\n                    </Dropdown.Option>\n                  ))}\n              </Dropdown.List>\n            </Dropdown>\n          </Field>\n        </div>\n        <div className=\"w-full my-10\">\n          <Field>\n            <Label>Description</Label>\n            <Textarea\n              name=\"desc\"\n              control={control}\n              placeholder=\"Enter your description\"\n              className=\"h-[100px]\"\n            ></Textarea>\n          </Field>\n        </div>\n        <div className=\"form-layout\">\n          <Field>\n            <Label>Feature Hot</Label>\n            <Toggle\n              on={watchHot === true}\n              onClick={() => setValue(\"hot\", !watchHot)}\n            ></Toggle>\n          </Field>\n          {(userInfo?.role === userRole.ADMIN ||\n            userInfo?.role === userRole.MOD) && (\n            <Field>\n              <Label>Status</Label>\n              <div className=\"flex items-center gap-x-5\">\n                <Radio\n                  name=\"status\"\n                  control={control}\n                  checked={Number(watchStatus) === postStatus.APPROVED}\n                  value={postStatus.APPROVED}\n                >\n                  Approved\n                </Radio>\n                <Radio\n                  name=\"status\"\n                  control={control}\n                  checked={Number(watchStatus) === postStatus.PENDING}\n                  value={postStatus.PENDING}\n                >\n                  Pending\n                </Radio>\n                <Radio\n                  name=\"status\"\n                  control={control}\n                  checked={Number(watchStatus) === postStatus.REJECTED}\n                  value={postStatus.REJECTED}\n                >\n                  Reject\n                </Radio>\n              </div>\n            </Field>\n          )}\n        </div>\n\n        <Button\n          type=\"submit\"\n          className=\"mx-auto w-[250px]\"\n          isLoading={loading}\n          disabled={loading}\n        >\n          Add new post\n        </Button>\n      </form>\n    </PostAddNewStyles>\n  );\n};\n\nexport default PostAddNew;\n\n/**\n *  <div className=\"grid grid-cols-2 mb-10 gap-x-10\">\n          <Field>\n            <Label>Title</Label>\n            <Input\n              name=\"title\"\n              control={control}\n              placeholder=\"Enter your title\"\n            ></Input>\n          </Field>\n          <Field>\n            <Label>Slug</Label>\n            <Input\n              control={control}\n              placeholder=\"Enter your slug\"\n              name=\"slug\"\n            ></Input>\n          </Field>\n        </div>\n */\n"],"names":["PostAddNewStyles","styled","navigate","useNavigate","useForm","mode","defaultValues","title","slug","status","category","hot","image","user","control","watch","handleSubmit","setValue","getValues","reset","useFirebaseImage","progress","handleSelectImage","handleDeleteImage","handleResetUpload","useState","categories","setCategories","selectCategory","setSelectCategory","loading","setLoading","userInfo","useAuth","useEffect","colRef","collection","database","q","query","where","getDocs","querySnapshot","result","forEach","doc","push","id","data","getData","watchStatus","watchHot","email","fetchDataUser","addPostHandle","values","cloneValues","slugify","lower","Number","addDoc","userId","categoryId","createdAt","serverTimestamp","toast","handleSelectCategory","item","getDoc","docData","document","className","onSubmit","onChange","I","name","placeholder","length","map","onClick","on","role","userRole","checked","postStatus","value","type","isLoading","disabled"],"sourceRoot":""}